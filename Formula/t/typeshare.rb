class Typeshare < Formula
  desc "Synchronize type definitions between Rust and other languages for seamless FFI"
  homepage "https://github.com/1Password/typeshare"
  url "https://github.com/1Password/typeshare/archive/refs/tags/v1.13.2.tar.gz"
  sha256 "7640e70720190576aa82df57561841f33720281e55dc65fedcc0cd89ccc411e2"
  license any_of: ["Apache-2.0", "MIT"]
  head "https://github.com/1Password/typeshare.git", branch: "main"

  depends_on "rust" => :build

  def install
    system "cargo", "install", *std_cargo_args(path: "cli")

    generate_completions_from_executable(bin/"typeshare", "completions")
  end

  test do
    assert_match version.to_s, shell_output("#{bin}/typeshare --version")

    system bin/"typeshare", "--generate-config", testpath
    assert_path_exists testpath/"typeshare.toml"

    (testpath/"example.rs").write <<~RUST
      #[typeshare]
      struct MyStruct {
          my_name: String,
          my_age: u32,
      }
    RUST

    system bin/"typeshare", testpath/"example.rs", "--lang", "typescript", "--output-file", testpath/"TestType.ts"
    assert_match "Generated by typeshare", (testpath/"TestType.ts").read
  end
end
